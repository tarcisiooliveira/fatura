instalando dependencia ex_doc e gerando documentação do projeto
:ex_doc, " 0.19.0"
mix deps.get
mix doc

gerando documentação html
instalou dependencias e criou documntação
proxima parte, testes
=====

a documentaçção já serve como teste
bash: mix docs - gera a documentação
bash: recompile - paracompilar o código e conseguir usar junto com o "iex -S mix"
bash: mix format enderecoArquivo
===============

Aula 17
iex(9)> cores = %{cor1: "Azul", cor2: "Verde"}
%{cor1: "Azul", cor2: "Verde"}
iex(10)> cores.cor1
"Azul"
iex(11)> cores
%{cor1: "Azul", cor2: "Verde"}
iex(12)> cores = Map.put(cores, :cor3, "Marrom")
%{cor1: "Azul", cor2: "Verde", cor3: "Marrom"}
iex(13)> cores
%{cor1: "Azul", cor2: "Verde", cor3: "Marrom"}
iex(14)> %{cores | cor3: "Laranja"}
%{cor1: "Azul", cor2: "Verde", cor3: "Laranja"}
iex(15)> cores
%{cor1: "Azul", cor2: "Verde", cor3: "Marrom"}
iex(16)> cores[:cor3]
"Marrom"
iex(17)> Map.fetch(cores, :cor1) - Procura se existe a chave e retorna {:ok, valorDaChave}
{:ok, "Azul"}

a imutabilidade é da estrutura, não do dado contido nela
============================================
defmodule Fatura.Conta do
    defstruct fatura: nil, vencimento: nil
end

iex(1)> luz = %Fatura.Conta{fatura: "Luz", vencimento: 10}
%Fatura.Conta{fatura: "Luz", vencimento: 10}
iex(2)> luz
%Fatura.Conta{fatura: "Luz", vencimento: 10}
iex(3)> is_map(luz)
true
iex(5)> is_map(%Fatura.Conta{})
true
iex(6)> luz.__struct__
Fatura.Conta

===========================
Aula 19

atribuindo indices a listas, no caso um mapa passado
(lista de faturas, indice desejado)
Enum.with_index(bills)
|> Enum.at(index)

